Gloan is a good man!



#include<iostream>
#include<ctime>
#include<vector>
#define _CRTDBG_MAP_ALLOC
#include <crtdbg.h>

using namespace std;
#define Max 20

struct ReportCard {
	int itemNum;
	int rank;
	char name;
	int score;
	ReportCard* next;
};
class School {
private:
	int menTeamScore;
	int womenTeamScore;
	int teamScore;
public:
	ReportCard* repCard;
	void append(int length, int maxScore,int maxRank,int m,int itemNum);
	int Score(int rank, int maxScore);
	void display() ;
	School();
	~School() {};
};

class Statistical {
protected:
	int n, m, w;
	int* itemnum;
	School* school;
public:
	Statistical(int a, int b, int c);
	void Competition();
	void init();
	void display();
	~Statistical() { delete[] school; };
};


Statistical::Statistical(int a, int b, int c) {
	n = a;
	m = b;
	w = c;
	school = new School[n];
	init();
	
}
School::School() {
	ReportCard head; 
	repCard = &head;
	repCard->next = NULL; 
	menTeamScore = 0;
	womenTeamScore = 0; 
	teamScore = 0;
}
void Statistical::init() {
	for (int num = 0; num < n; num++) {
		ReportCard* rep;
		int enterProgram, itemNumber;
		enterProgram = (rand() % (m + w)) + 1;
		for (int programNum = 0; programNum < enterProgram; programNum++) {
			while (1) {
				bool isExist = true;
				itemNumber = (rand() % (m + w)) + 1;
				ReportCard* q = school[num].repCard->next;
				while (school[num].repCard->next != NULL) {
					if (school[num].repCard->next->itemNum == itemNumber) {
						bool isExist = false;
						break;
					}
					school[num].repCard->next = school[num].repCard->next->next;
				}
				if (isExist) {
					rep = (ReportCard*)malloc(sizeof(ReportCard));
					rep->itemNum = itemNumber;
					school[num].repCard->rank = 0;
					school[num].repCard->score = 0;
					school[num].repCard->name = '0';
					rep->next = q;
					school[num].repCard->next = rep;
					break;
				}
			}
		}
	}
	for (int programNum = 0; programNum < n; programNum++) {
		while (school[programNum].repCard->next != NULL) {
			cout << school[programNum].repCard->next->itemNum<<" ";
			school[programNum].repCard->next = school[programNum].repCard->next->next;
		}
		cout << "-------------";
	}
	Competition();
	display();
}

int School::Score(int rank, int maxScore) {

	if (maxScore == 7) {
		if (rank <= 3) {
			return maxScore - (rank - 1) * 2;
		}
		else {
			return 3 - (rank - 1);
		}
	}
	else {
		return maxScore - 2 * (rank - 1);
	}
}

void School::append(int length, int maxScore, int maxRank,int m,int itemNum) {
	int score;
	repCard->rank = length;
	if (length > maxRank)
		score = 0;
	else
		score = Score(length, maxScore);
	cout << score<<" ";
	repCard->score = score;
	teamScore += score;
	if (itemNum > m)
		womenTeamScore += score;
	else
		menTeamScore += score;


}
void Statistical::Competition(){
	for (int itemNum = 1; itemNum <= (w + m); itemNum++) {
		int rank, length = 0;
		int maxRank, maxScore;
		if (itemNum % 2 == 0) {
			maxScore = 7;
			maxRank = 5;
		}
		else {
			maxScore = 5;
			maxRank = 3;
		}
		vector<int> vec;
		for (int schoolnum = 0; schoolnum < n; schoolnum++) {
			while (1) {
				bool isBreak = true;
				int i = 0;
				rank = rand() % n;
				if (length > 0) {
					for (int num = 0; num < length; num++) {
						if (vec[num] == rank)
							isBreak = false;
					}
				}
				if (isBreak)
					break;
			}

			vec.push_back(rank);
			while (school[rank].repCard->next != NULL) {
				if (school[rank].repCard->next->itemNum == itemNum) {
					length++;
					cout << school[rank].repCard->next->itemNum << " ";
					school[rank].append(length,maxScore,maxRank,m,itemNum);
					break;
				}
				school[rank].repCard->next = school[rank].repCard->next->next;
			}
			/*school[rank].repCard->next = q;*/
		}
	}
}

void Statistical::display() {
	for (int schoolNum = 0; schoolNum < n; schoolNum++) {
		while (school[schoolNum].repCard->next != NULL) {
			school[schoolNum].display();
			school[schoolNum].repCard->next = school[schoolNum].repCard->next->next;
		}
	}
}
void School::display() {
	while (repCard->next != NULL) {
		cout << repCard->itemNum << " ";
		cout << repCard->rank << " ";
		cout << repCard->score << " ";
		cout << endl;
	}
	cout << menTeamScore << "";
	cout << womenTeamScore << "";
	cout << teamScore << "";
	cout << endl;
}

int main() {
	srand(time(NULL));
	int n, m, w;
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);

	cout << "请分别输入学校编号和男子，女子项目:" << endl;
	cin >> n >> m >> w;
	Statistical program(n, m, w);
	system("pause");
	return 0;
}



